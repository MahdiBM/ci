name: Run pure unit tests
on:
  workflow_call:
    inputs:
      with_coverage:
        type: boolean
        required: false
        default: false
        description: "Set to 'true' to collect and upload code coverage data. Defaults to 'false'."
      with_tsan:
        type: boolean
        required: false
        default: true
        description: "Set to 'true' to run tests with Thread Sanitizer. Defaults to 'true'."
      with_public_api_check:
        type: boolean
        required: false
        default: true
        description: "Set to 'true' to run the SwiftPM public API breakage check. Defaults to 'true'."
      test_filter:
        type: string
        required: false
        default: ''
        description: "Apply a --filter to the tests that will be run."
      package_root:
        type: string
        required: false
        default: ''
        description: "Specifies a subpath of the checkout to run tests and upload coverage from."
      coverage_ignores:
        type: string
        required: false
        default: '/Tests/'
        description: "Additional source-relative paths to ignore when generating code coverage reports."
      extra_flags:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied on when testing on all platforms."
      extra_flags_linux:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on Linux."
      extra_flags_macos:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on macOS."
      extra_flags_windows:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on Windows."

jobs:

  api-breakage:
    if: inputs.with_public_api_check && !(github.event.pull_request.draft || false)
    runs-on: ubuntu-latest
    container: swift:5.8-jammy
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with: { 'fetch-depth': 0 }
      - name: Run API breakage check action
        uses: vapor/ci/.github/actions/ci-swift-check-api-breakage@reusable-workflows
        with:
          package_root: ${{ inputs.package_root }}

  linux-unit:
    if: !(github.event.pull_request.draft || false)
    strategy:
      fail-fast: false
      matrix:
        swift-image:
          - swift:5.6-focal
          - swift:5.7-jammy
          - swift:5.8-jammy
          - swiftlang/swift:nightly-5.9-jammy
          - swiftlang/swift:nightly-main-jammy
    runs-on: ubuntu-latest
    container: ${{ matrix.swift-image }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Check minimum Swift version for package
        id: swift-check
        run: |
          echo $(swift package tools-version) $(swift package --version | cut -c31-) | { \
            IFS=. read -r pkmajor pkminor pkpatch tcmajor tcminor tcpatch ; \
            pkver=$(( $pkmajor * 10000 + $pkminor * 100 + $pkpatch )) ; \
            tcver=$(( $tcmajor * 10000 + $tcminor * 100 + $tcpatch )) ; \
            echo "ok=$([ $pkver -le $tcver ] && echo true || echo false)" >>"${GITHUB_OUTPUT}" ; \
          }
      - name: Run unit tests
        if: steps.swift-check.outputs.ok
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
          WITH_COVERAGE: ${{ inputs.with_coverage && '--enable-code-coverage' || '' }}
          WITH_TSAN:     ${{ $inputs.with_tsan && '--sanitize=thread' || '' }}
          TEST_FILTER:   ${{ inputs.test_filter != '' && format('--filter={0}', inputs.test_filter) || '' }}
          PACKAGE_ROOT:  ${{ inputs.package_root != '' && format('--package-path {0}', inputs.package_root) || '' }}
          EXTRA_FLAGS:   ${{ format('{0} {1}', inputs.extra_flags, inputs.extra_flags_linux) }}
        run: |
          swift test ${PACKAGE_ROOT} ${WITH_COVERAGE} ${WITH_TSAN} ${TEST_FILTER} ${EXTRA_FLAGS}
      - name: Upload code coverage when present
        if: inputs.with_coverage && steps.swift-check.outputs.ok
        uses: vapor/swift-codecov-action@v0.2
        with:
          package_path:     ${{ inputs.package_root }}
          ignore_paths:     ${{ inputs.coverage_ignores }}
          build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_linux }}
          cc_env_vars:      'SWIFT_VERSION,SWIFT_PLATFORM,RUNNER_OS,RUNNER_ARCH'

  macos-unit:
    if: !(github.event.pull_request.draft || false)
    strategy:
      fail-fast: false
      matrix:
        macos-version:
          - macos-13
        xcode-version:
          - latest-stable
    runs-on: ${{ matrix.macos-version }}
    steps:
      - name: Select appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
          WITH_COVERAGE: ${{ inputs.with_coverage && '--enable-code-coverage' || '' }}
          WITH_TSAN:     ${{ $inputs.with_tsan && '--sanitize=thread' || '' }}
          TEST_FILTER:   ${{ inputs.test_filter != '' && format('--filter={0}', inputs.test_filter) || '' }}
          PACKAGE_ROOT:  ${{ inputs.package_root != '' && format('--package-path {0}', inputs.package_root) || '' }}
          EXTRA_FLAGS:   ${{ format('{0} {1}', inputs.extra_flags, inputs.extra_flags_macos) }}
        run: |
          swift test ${PACKAGE_ROOT} ${WITH_COVERAGE} ${WITH_TSAN} ${TEST_FILTER} ${EXTRA_FLAGS}
      - name: Upload code coverage when present
        if: inputs.with_coverage
        uses: vapor/swift-codecov-action@v0.2
        with:
          package_path:     ${{ inputs.package_root }}
          ignore_paths:     ${{ inputs.coverage_ignores }}
          build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_macos }}
          cc_env_vars:      'MD_APPLE_SDK_ROOT,RUNNER_OS,RUNNER_ARCH'

#   windows-unit:
#     if: !(github.event.pull_request.draft || false)
#     strategy:
#       fail-fast: false
#       matrix:
#         swift-version:
#           - 5.6
#           - 5.7
#           - 5.8
#           - 5.9
#         include:
#           - { swift-version: 5.6, swift-branch: swift-5.6.3-RELEASE, swift-tag: 5.6.3-RELEASE }
#           - { swift-version: 5.7, swift-branch: swift-5.7.3-RELEASE, swift-tag: 5.7.3-RELEASE }
#           - { swift-version: 5.8, swift-branch: swift-5.8.1-RELEASE, swift-tag: 5.8.1-RELEASE }
#           - { swift-version: 5.9, swift-branch: swift-5.9-branch, swift-tag: 5.9-DEVELOPMENT-SNAPSHOT-2023-05-11-a }
#     runs-on: windows-latest
#     steps:
#       - name: Install Windows Swift toolchain
#         uses: compnerd/gha-setup-swift@main
#         with:
#           branch: ${{ matrix.swift-branch }}
#           tag: ${{ matrix.swift-tag }}
#       - name: Check out code
#         uses: actions/checkout@v3
#       - name: Run unit tests
#         env:
#           SWIFT_DETERMINISTIC_HASHING: 1
#           WITH_COVERAGE: ${{ inputs.with_coverage && '--enable-code-coverage' || '' }}
#           WITH_TSAN:     ${{ $inputs.with_tsan && '--sanitize=thread' || '' }}
#           TEST_FILTER:   ${{ inputs.test_filter != '' && format('--filter={0}', inputs.test_filter) || '' }}
#           PACKAGE_ROOT:  ${{ inputs.package_root != '' && format('--package-path {0}', inputs.package_root) || '' }}
#           EXTRA_FLAGS:   ${{ format('{0} {1}', inputs.extra_flags, inputs.extra_flags_windows) }}
#         run: |
#           swift test ${PACKAGE_ROOT} ${WITH_COVERAGE} ${WITH_TSAN} ${TEST_FILTER} ${EXTRA_FLAGS}
#       - name: Upload code coverage when present
#         if: inputs.with_coverage
#         uses: vapor/swift-codecov-action@v0.2
#         with:
#           package_path:     ${{ inputs.package_root }}
#           ignore_paths:     ${{ inputs.coverage_ignores }}
#           build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_windows }}
#           cc_env_vars:      'SWIFT_VERSION,RUNNER_OS,RUNNER_ARCH'
